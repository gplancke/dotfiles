#!/bin/bash

{{ if eq .chezmoi.os "darwin" -}}
DISTRO="darwin"
{{- else -}}
DISTRO="ubuntu"
{{- end }}

#############################################
# Installs homebrew on darwin and linux
# On linux it installs linuxbrew
# We tend to use nix instead
#############################################

install_brew() {
  local os_type="$1"
  local installer_url="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"
  local brew_bin

  # If brew already exists, bail out
  if command -v brew >/dev/null 2>&1; then
    printf 'Homebrew is already installed (%s)\n' "$(command -v brew)"
    return 0
  fi

  printf 'Installing Homebrew...\n'
  curl -fsSL "$installer_url" | bash

  # Determine where brew was installed
  if [ "$os_type" = "darwin" ]; then
    brew_bin="/opt/homebrew/bin/brew"
  else
    if [ -d "/home/linuxbrew/.linuxbrew" ]; then
      brew_bin="/home/linuxbrew/.linuxbrew/bin/brew"
    else
      brew_bin="$HOME/.linuxbrew/bin/brew"
    fi
  fi

  # Load brew into the current shell, or error out
  if [ -x "$brew_bin" ]; then
    eval "$("$brew_bin" shellenv)"
    printf 'Homebrew installed and initialized: %s\n' "$brew_bin"
  else
    printf 'Error: brew not found after installation\n' >&2
    return 1
  fi
}

#############################################
# Install nix on darwin and linux
# On darwin, we add the nix-darwin util
#############################################

install_nix() {
  local os_type=$1
  local nix_profile="$HOME/.nix-profile"
  local installer_url="https://install.determinate.systems/nix"
  local uninstall_script="$HOME/.local/bin/nix-uninstall"

  # If Nix isn’t already installed…
  if [ ! -d "$nix_profile" ]; then
    printf 'Installing Nix via %s\n' "$installer_url"
    curl --proto '=https' --tlsv1.2 -sSfL "$installer_url" | sh -s -- install --no-confirm

    # Load Nix environment
    if [ -f "$nix_profile/etc/profile.d/nix.sh" ]; then
      # shellcheck source=/dev/null
      . "$nix_profile/etc/profile.d/nix.sh"
    fi
    if [ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]; then
      # shellcheck source=/dev/null
      . "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
    fi

    # Create uninstall helper
    mkdir -p "$HOME/.local/bin"
    cat > "$uninstall_script" << 'EOF'
#!/usr/bin/env bash
/nix/nix-installer uninstall
EOF
    chmod +x "$uninstall_script"

    # macOS-specific: install nix-darwin
    if [ "$os_type" = "darwin" ]; then
      printf 'Setting up nix-darwin for macOS\n'
      # Ensure Nix env is loaded again
      # shellcheck source=/dev/null
      . "$nix_profile/etc/profile.d/nix.sh"

      local tmpdir
      tmpdir=$(mktemp -d)
      nix-build https://github.com/LnL7/nix-darwin/archive/master.tar.gz -A installer --out-link "$tmpdir/result"
      "$tmpdir/result/bin/darwin-installer"
      cp "$tmpdir/result/bin/darwin-uninstaller" "$HOME/.local/bin/"
      rm -rf "$tmpdir"
    fi

  else
    printf 'Nix is already installed at %s\n' "$nix_profile"
  fi
}

install_devbox() {
	if [ ! command -v devbox >/dev/null 2>&1 ]; then
		curl -fsSL https://get.jetify.com/devbox | bash
	else
		printf 'Devbox is already installed.\n'
	fi
}

#############################################
# Install essential tooling
#############################################

install_essentials() {
  local distro=$1
  local home="$HOME"
  local local_dir="$home/.local"
  local workspace="$home/Workspace/Projects"

  # Temporarily disable Git’s SSL check on macOS
  if [ "$distro" = "darwin" ] && command -v git >/dev/null 2>&1; then
    git config --global http.sslVerify false
  fi

  # Create required directories
  mkdir -p \
    "$local_dir"/{bin,share,etc,src} \
    "$local_dir/share"/{node_modules,python_packages,gems,pnpm} \
    "$workspace"

  case "$distro" in
    ubuntu|debian)
      printf 'Updating APT and installing essentials...\n'
      sudo apt-get update -y && sudo apt-get upgrade -y
      sudo apt-get install -y \
        build-essential curl git zsh fonts-hack-ttf
      ;;
    darwin)
      printf 'Installing essentials via Homebrew...\n'
      brew install openssl zsh font-hack-nerd-font
      ;;
    *)
      printf 'Error: unsupported distribution "%s"\n' "$distro"
      return 1
      ;;
  esac

  # Re-enable Git’s SSL check if Git is present
  if command -v git >/dev/null 2>&1; then
    git config --global http.sslVerify true
  fi

  printf 'Done. Please log out and back in for changes to take effect.\n'
}

#############################################
# Install them all
#############################################
install_brew $DISTRO
install_nix $DISTRO
install_devbox $DISTRO

install_essentials $DISTRO

exit 0
