#!/bin/bash

set -euo pipefail

# Optional: uncomment for debugging
# set -x

{{/* Include shared utility functions */}}
{{- template "shell-utils" . -}}

{{ if eq .chezmoi.os "darwin" -}}
DISTRO="darwin"
{{- else -}}
# Detect Linux distribution
if [ -f /etc/os-release ]; then
  . /etc/os-release
  case "$ID" in
    fedora|rhel|centos|rocky|almalinux)
      DISTRO="fedora"
      ;;
    arch|manjaro|endeavouros|garuda)
      DISTRO="arch"
      ;;
    ubuntu|debian|pop|elementary|linuxmint)
      DISTRO="debian"
      ;;
    alpine)
      DISTRO="alpine"
      ;;
    *)
      DISTRO="unknown"
      ;;
  esac
else
  DISTRO="unknown"
fi
{{- end }}

#############################################
# Install essential tooling
#############################################

install_essentials() {
  local distro=$1
  local home="$HOME"
  local local_dir="$home/.local"
  local workspace="$home/Workspace/Projects"

  git_disable_ssl "$distro"

  # Create required directories
  mkdir -p \
    "$local_dir"/{bin,share,etc,src} \
    "$local_dir/share"/{node_modules,python_packages,gems,pnpm} \
    "$workspace"

  case "$distro" in
    debian)
      printf 'Updating APT and installing essentials...\n'
      sudo apt-get update -y && sudo apt-get upgrade -y
      sudo apt-get install -y \
        build-essential curl git zsh fonts-hack-ttf
      ;;
    fedora)
      printf 'Updating DNF and installing essentials...\n'
      sudo dnf update -y
      sudo dnf install -y \
        @development-tools curl git zsh hack-fonts
      ;;
    arch)
      printf 'Updating Pacman and installing essentials...\n'
      sudo pacman -Syu --noconfirm
      sudo pacman -S --noconfirm \
        base-devel curl git zsh ttf-hack
      ;;
    alpine)
      printf 'Updating APK and installing essentials...\n'
      sudo apk update && sudo apk upgrade
      sudo apk add \
        build-base curl git zsh font-hack-ttf
      ;;
    darwin)
      printf 'No essentials for macos...\n'
      xcode-select --install || true
      ;;
    *)
      printf 'Error: unsupported distribution "%s"\n' "$distro"
      return 1
      ;;
  esac

  git_enable_ssl

  printf 'Done. Please log out and back in for changes to take effect.\n'
}

#############################################
# Installs homebrew on darwin and linux
# On linux it installs linuxbrew
# We tend to use nix instead
#############################################

install_brew() {
  local os_type="$1"
  local installer_url="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"
  local brew_bin

  # If brew already exists, bail out
  if command -v brew >/dev/null 2>&1; then
    printf 'Homebrew is already installed (%s)\n' "$(command -v brew)"
    return 0
  fi

  printf 'Installing Homebrew...\n'
  /bin/bash -c "$(curl -fsSL $installer_url)"

  # Determine where brew was installed
  if [ "$os_type" = "darwin" ]; then
    brew_bin="/opt/homebrew/bin/brew"
  else
    if [ -d "/home/linuxbrew/.linuxbrew" ]; then
      brew_bin="/home/linuxbrew/.linuxbrew/bin/brew"
    else
      brew_bin="$HOME/.linuxbrew/bin/brew"
    fi
  fi

  load_brew "$brew_bin"

  if command -v brew >/dev/null 2>&1; then
    printf 'Homebrew installed and initialized: %s\n' "$(command -v brew)"
  else
    printf 'Error: brew not found after installation\n' >&2
    return 1
  fi
}

#############################################
# Install nix on darwin and linux
# On darwin, we add the nix-darwin util
#############################################

install_nix() {
  local os_type=$1
  local nix_profile="$HOME/.nix-profile"
  local installer_url="https://install.determinate.systems/nix"
  local uninstall_script="$HOME/.local/bin/nix-uninstall"

  # If Nix isn't already installedâ€¦
  if [ ! -d "$nix_profile" ]; then
    printf 'Installing Nix via %s\n' "$installer_url"
    curl --proto '=https' --tlsv1.2 -sSfL "$installer_url" | sh -s -- install --no-confirm

    load_nix

    # Create uninstall helper
    mkdir -p "$HOME/.local/bin"
    cat > "$uninstall_script" << 'EOF'
#!/usr/bin/env bash
/nix/nix-installer uninstall
EOF
    chmod +x "$uninstall_script"

    # macOS-specific: install nix-darwin
    if [ "$os_type" = "darwin" ]; then
      local tmpdir
      tmpdir=$(mktemp -d)
      nix-build https://github.com/LnL7/nix-darwin/archive/master.tar.gz -A installer --out-link "$tmpdir/result"
      "$tmpdir/result/bin/darwin-installer"
      cp "$tmpdir/result/bin/darwin-uninstaller" "$HOME/.local/bin/"
      rm -rf "$tmpdir"
    fi

  else
    printf 'Nix is already installed at %s\n' "$nix_profile"
  fi
}

install_devbox() {
	if command -v devbox >/dev/null 2>&1; then
		printf 'Devbox is already installed.\n'
	else
		curl -fsSL https://get.jetify.com/devbox | bash
	fi
}

#############################################
# Install complement tooling
#############################################

install_complements() {
  local distro=$1

  git_disable_ssl "$distro"

  case "$distro" in
    debian)
      printf 'No additional complements needed for Debian-based systems...\n'
      ;;
    fedora)
      printf 'No additional complements needed for Fedora-based systems...\n'
      ;;
    arch)
      printf 'No additional complements needed for Arch-based systems...\n'
      ;;
    alpine)
      printf 'No additional complements needed for Alpine Linux...\n'
      ;;
    darwin)
      printf 'Installing complements via Homebrew...\n'
      brew install openssl zsh font-hack-nerd-font
      ;;
    *)
      printf 'Error: unsupported distribution "%s"\n' "$distro"
      return 1
      ;;
  esac

  git_enable_ssl

  printf 'Done. Please log out and back in for changes to take effect.\n'
}

#############################################
# Install them all
#############################################
install_essentials $DISTRO

install_brew $DISTRO || true
install_nix $DISTRO || true
install_devbox $DISTRO || true

install_complements $DISTRO || true

exit 0
