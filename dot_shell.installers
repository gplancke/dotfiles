#############################################
# Install zsh plugin manager
# We want to replace this with a nix flake
#############################################

function install_zsh_manager {
  if [ ! -f "$HOME/.config/antigen/antigen.zsh" ]; then
		echo "Installing zsh plugin manager (antigen)"
    mkdir -p "$HOME/.config/antigen"
    curl -L git.io/antigen > $HOME/.config/antigen/antigen.zsh
  fi
}

#############################################
# Install tmux plugin manager (tpm)
# We want to replace this with a nix flake
#############################################

function install_tmux_manager {
  if [ ! -d "${HOME}/.tmux/plugins/tpm" ]; then
		echo "Installing tmux plugin manager"
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
	fi
}

#############################################
# Install rust
# The reason we install it with a standalone script
# and not with nix is because it needs to be linked to the system
# especially in Macos where it needs to find the Xcode tools
# With nix, it can cause problems as the libraries might be siloed
#############################################

function install_rust {
	if [ ! -d "$HOME/.cargo" ]; then
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs \
			| sh -s -- --defaults-toolchain nightly -y
	fi
}

#############################################
# Install cocoapods
#############################################

function install_cocoa_pods {
  local os

  if [[ "$(uname)" == "Darwin" ]]; then
    os="darwin"
  elif [[ "$(uname)" == "Linux" ]]; then
    os="linux"
  else
    # echo "Unsupported operating system: $(uname)"
    return 1
  fi

	if [ "$os" != "darwin" ]; then
		# echo "CocoaPods is only available on MacOS"
		return 1
	fi

  if ! command -v brew >/dev/null 2>&1; then
    # echo "Homebrew is not installed. Please install Homebrew first."
    return 1
  fi

  if ! which cocoapods >/dev/null; then
    echo "Installing CocoaPods"
    brew install cocoapods
    echo "CocoaPods installed successfully"
  fi
}

#############################################
# Install flutter
#############################################

function install_flutter {
  local os arch install_dir flutter_url temp_file

  # Detect OS
  case "$(uname)" in
    Darwin) os="macos" ;;
    Linux) os="linux" ;;
    *)
      echo "❌ Unsupported operating system: $(uname)" >&2
      return 1
      ;;
  esac

  # Detect architecture
  case "$(uname -m)" in
    x86_64) arch="x64" ;;
    arm64|aarch64) arch="arm64" ;;
    *)
      echo "❌ Unsupported architecture: $(uname -m)" >&2
      return 1
      ;;
  esac

  # Installation directory
  install_dir="${FLUTTER_INSTALL_DIR:-$HOME/.local/share/flutter}"

  # Check if already installed
  if [[ -d "$install_dir/bin" && -x "$install_dir/bin/flutter" ]]; then
    echo "✅ Flutter already installed at $install_dir"
    return 0
  fi

  # Use the correct Flutter download URLs
  if [[ "$os" == "linux" ]]; then
    flutter_url="https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${arch}-stable.tar.xz"
    temp_file="$(mktemp).tar.xz"
  else
    # macOS uses universal binaries now (no separate arm64/x64)
    flutter_url="https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos-stable.zip"
    temp_file="$(mktemp).zip"
  fi

  # Create installation directory
  mkdir -p "$install_dir" || {
    echo "❌ Failed to create directory: $install_dir" >&2
    return 1
  }

  # Download with progress
  echo "📥 Downloading latest stable Flutter SDK for $os..."
  if ! curl -L --fail --progress-bar -o "$temp_file" "$flutter_url"; then
    echo "❌ Download failed. Trying alternative method..." >&2

    # Fallback: use git clone (official method)
    echo "📥 Cloning Flutter from GitHub (stable branch)..."
    if ! git clone -b stable --depth 1 https://github.com/flutter/flutter.git "$install_dir"; then
      echo "❌ Failed to clone Flutter repository" >&2
      rm -f "$temp_file"
      return 1
    fi

    # Verify git clone installation
    if [[ -x "$install_dir/bin/flutter" ]]; then
      echo "✅ Flutter cloned successfully at $install_dir"
      echo "💡 Add to your PATH: export PATH=\"$install_dir/bin:\$PATH\""
      "$install_dir/bin/flutter" --version 2>/dev/null | head -1
      return 0
    else
      echo "❌ Git clone verification failed" >&2
      return 1
    fi
  fi

  # Extract downloaded archive
  echo "📦 Extracting Flutter SDK..."
  if [[ "$os" == "linux" ]]; then
    if ! tar -xf "$temp_file" -C "$install_dir" --strip-components=1; then
      echo "❌ Failed to extract Flutter SDK" >&2
      rm -f "$temp_file"
      return 1
    fi
  else
    local temp_dir
    temp_dir="$(mktemp -d)"
    if ! unzip -q "$temp_file" -d "$temp_dir"; then
      echo "❌ Failed to extract Flutter SDK" >&2
      rm -f "$temp_file"
      rm -rf "$temp_dir"
      return 1
    fi
    if ! mv "$temp_dir/flutter"/* "$install_dir/" 2>/dev/null; then
      echo "❌ Failed to move Flutter files" >&2
      rm -f "$temp_file"
      rm -rf "$temp_dir"
      return 1
    fi
    rm -rf "$temp_dir"
  fi

  # Clean up
  rm -f "$temp_file"

  # Verify installation
  if [[ -x "$install_dir/bin/flutter" ]]; then
    echo "✅ Flutter installed successfully at $install_dir"
    echo "💡 Add to your PATH: export PATH=\"$install_dir/bin:\$PATH\""
    "$install_dir/bin/flutter" --version 2>/dev/null | head -1
  else
    echo "❌ Installation verification failed" >&2
    return 1
  fi
}

#############################################
# Install theme manager
# Mainly base16 themes
# However, we tend to use catpuccin as mush as we can now
#############################################

function install_theme_manager {
  if [ ! -d "$HOME/.local/share/base16-manager" ]; then
		echo "Installing base16 theme manager"
    mkdir -p "$HOME/.local/share/base16-manager"
    git clone https://github.com/base16-manager/base16-manager.git \
      $HOME/.local/share/base16-manager && \
      cp $HOME/.local/share/base16-manager/base16-manager $HOME/.local/bin/
    $HOME/.local/bin/base16-manager install chriskempson/base16-shell
    $HOME/.local/bin/base16-manager install chriskempson/base16-vim
    $HOME/.local/bin/base16-manager install nicodebo/base16-fzf

    $HOME/.local/bin/base16-manager set ocean
  fi
}

