# Shell utility functions for chezmoi scripts
# Contains common functions used across installation scripts

# Load Nix environment
load_nix() {
	local nix_profile="$HOME/.nix-profile"

	if command -v nix >/dev/null 2>&1; then
		printf 'Loading Nix environment\n'

		if [ -d "$nix_profile" ]; then
			export NIX_PATH="$nix_profile/etc/nix:$NIX_PATH"
			export PATH="$nix_profile/bin:$PATH"
			export NIX_PROFILES="$nix_profile/profiles"
			export NIX_USER_PROFILE_DIR="$nix_profile/profiles/per-user/$USER"
		fi

		[ -f "${nix_profile}/etc/profile.d/nix.sh" ] && . "${nix_profile}/etc/profile.d/nix.sh"

		[ ! -f "${nix_profile}/etc/profile.d/nix.sh" ] \
			&& [ -f "/nix/var/nix/profiles/default/etc/profile.d/nix.sh" ] \
			&& . /nix/var/nix/profiles/default/etc/profile.d/nix.sh

		[ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ] \
			&& . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
	fi
}

# Load Home Manager
load_homemanager() {
	if command -v home-manager >/dev/null 2>&1; then
		printf 'Loading homemanager environment\n'
		# 	if [ -f "/etc/profiles/per-user/$USER/etc/profile.d/hm-session-vars.sh" ]; then
		# 		. "/etc/profiles/per-user/$USER/etc/profile.d/hm-session-vars.sh"
		# 	elif [ -f "$HOME/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh" ]; then
		# 		. "$HOME/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh"
		# 	elif [ -f "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh" ]; then
		# 		. "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"
		# 	fi
	fi
}

# Load Devbox environment
load_devbox() {
	if command -v devbox >/dev/null 2>&1; then
		printf 'Loading devbox environment\n'
		eval "$(devbox global shellenv)"
	fi
}

# Load Brew environment
load_brew() {
	local distro=$1

	case "$distro" in
		darwin)
			brew_bin="/opt/homebrew/bin/brew"
			;;
		*)
			brew_bin="/home/linuxbrew/.linuxbrew/bin/brew"
	esac

	if [ -x "$brew_bin" ]; then
		printf 'Loading Homebrew environment from\n'
		eval "$("$brew_bin" shellenv)"
	fi
}

# Common initialization for all platforms
common_setup() {
	local distro=$1

	load_brew "$distro"
	load_nix
	load_homemanager
	load_devbox
}

# Install Nix environment packages
install_nix_bins() {
	local nix_file=".config/nix"
	local current_dir="$(pwd)"

	# Nix
	if command -v nix >/dev/null 2>&1 && [ -f "$HOME/$nix_file/flake.nix" ]; then
		printf 'Installing Nix environment from %s\n' "$nix_file"
		cd $HOME/$nix_file && nix profile add '.#homies' && cd "$current_dir"
	fi

	# Home manager
	if command -v home-manager >/dev/null 2>&1; then
		printf 'Installing Home Manager'
		home-manager switch
	fi

	# Devbox
	if command -v devbox >/dev/null 2>&1; then
		local db_path
		db_path="$(devbox global path)"
		if [ -f "$db_path/devbox.json" ]; then
			printf 'Installing Devbox environment from %s/devbox.json\n' "$db_path"
			devbox global install
		fi
	fi
}

# Install Homebrew packages
install_brew_packages() {
	local brews=("$@")

	if [ ! -x "$(command -v brew)" ]; then
		echo "No brew found, skipping brew packages installation"
		return 0
	fi

	if [ ${#brews[@]} -eq 0 ]; then
		echo "No brew packages to install"
		return 0
	fi

	for package in "${brews[@]}"; do
		brew install "$package" || true
	done
}

# Install Homebrew casks
install_brew_casks() {
	local casks=("$@")

	if [ ! -x "$(command -v brew)" ]; then
		echo "No brew found, skipping cask installation"
		return 0
	fi

	if [ ${#casks[@]} -eq 0 ]; then
		echo "No casks to install"
		return 0
	fi

	for cask in "${casks[@]}"; do
		echo "cask \"$cask\""
		brew install --cask "$cask" || true
	done
}

# Install APT packages (Debian/Ubuntu)
install_apt_packages() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		echo "No apt packages to install"
		return 0
	fi

	for package in "${packages[@]}"; do
		sudo apt install -y "$package" || true
	done
}

# Install DNF packages (Fedora/RHEL/CentOS)
install_dnf_packages() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		echo "No dnf packages to install"
		return 0
	fi

	for package in "${packages[@]}"; do
		sudo dnf install -y "$package" || true
	done
}

# Install Pacman packages (Arch/Manjaro)
install_pacman_packages() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		echo "No pacman packages to install"
		return 0
	fi

	sudo pacman -S --noconfirm "${packages[@]}" || true
}

# Install APK packages (Alpine)
install_apk_packages() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		echo "No apk packages to install"
		return 0
	fi

	for package in "${packages[@]}"; do
		sudo apk add "$package" || true
	done
}

# Temporarily disable Git's SSL check on macOS
git_disable_ssl() {
	if [ "$1" = "darwin" ] && command -v git >/dev/null 2>&1; then
		git config --global http.sslVerify false
	fi
}

# Re-enable Git's SSL check if Git is present
git_enable_ssl() {
	if command -v git >/dev/null 2>&1; then
		git config --global http.sslVerify true
	fi
}
