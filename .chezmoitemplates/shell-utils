# Shell utility functions for chezmoi scripts
# Contains common functions used across installation scripts


#############################################
# Load Nix environment
#############################################
load_nix() {
	local nix_profile="$HOME/.nix-profile"

	if command -v nix >/dev/null 2>&1; then
		printf 'Loading Nix environment\n'

		if [ -d "$nix_profile" ]; then
			export NIX_PATH="$nix_profile/etc/nix:$NIX_PATH"
			export PATH="$nix_profile/bin:$PATH"
			export NIX_PROFILES="$nix_profile/profiles"
			export NIX_USER_PROFILE_DIR="$nix_profile/profiles/per-user/$USER"
		fi

		[ -f "${nix_profile}/etc/profile.d/nix.sh" ] && . "${nix_profile}/etc/profile.d/nix.sh"

		[ ! -f "${nix_profile}/etc/profile.d/nix.sh" ] \
			&& [ -f "/nix/var/nix/profiles/default/etc/profile.d/nix.sh" ] \
			&& . /nix/var/nix/profiles/default/etc/profile.d/nix.sh

		[ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ] \
			&& . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
	fi
}

#############################################
# Load Home Manager
#############################################
load_homemanager() {
	if command -v home-manager >/dev/null 2>&1; then
		printf 'Loading homemanager environment\n'
		# 	if [ -f "/etc/profiles/per-user/$USER/etc/profile.d/hm-session-vars.sh" ]; then
		# 		. "/etc/profiles/per-user/$USER/etc/profile.d/hm-session-vars.sh"
		# 	elif [ -f "$HOME/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh" ]; then
		# 		. "$HOME/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh"
		# 	elif [ -f "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh" ]; then
		# 		. "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"
		# 	fi
	fi
}

#############################################
# Load Devbox environment
#############################################
load_devbox() {
	if command -v devbox >/dev/null 2>&1; then
		printf 'Loading devbox environment\n'
		eval "$(devbox global shellenv)"
	fi
}

#############################################
# Load Brew environment
#############################################
load_brew() {
	local distro=$1

	case "$distro" in
		darwin)
			brew_bin="/opt/homebrew/bin/brew"
			;;
		*)
			brew_bin="/home/linuxbrew/.linuxbrew/bin/brew"
	esac

	if [ -x "$brew_bin" ]; then
		printf 'Loading Homebrew environment from %s\n' "$brew_bin"
		eval "$("$brew_bin" shellenv)"
	fi
}

#############################################
# Common initialization for all platforms
#############################################
common_setup() {
	local distro=$1

	load_brew "$distro"
	load_nix
	load_homemanager
	load_devbox
}

#############################################
# Install essential tooling
#############################################
install_essentials() {
  local distro=$1
  local home="$HOME"
  local local_dir="$home/.local"
  local workspace="$home/Workspace/Projects"

  git_disable_ssl "$distro"

  # Create required directories
  mkdir -p \
    "$local_dir"/{bin,share,etc,src} \
    "$local_dir/share"/{node_modules,python_packages,gems,pnpm} \
    "$workspace"

  case "$distro" in
    debian)
      printf 'Updating APT and installing essentials...\n'
      sudo apt-get update -y && sudo apt-get upgrade -y
      sudo apt-get install -y \
        build-essential curl git zsh fonts-hack-ttf
      ;;
    fedora)
      printf 'Updating DNF and installing essentials...\n'
      sudo dnf update -y
      sudo dnf install -y \
        @development-tools curl git zsh hack-fonts
      ;;
    arch)
      printf 'Updating Pacman and installing essentials...\n'
      sudo pacman -Syu --noconfirm
      sudo pacman -S --noconfirm \
        base-devel curl git zsh ttf-hack
      ;;
    alpine)
      printf 'Updating APK and installing essentials...\n'
      sudo apk update && sudo apk upgrade
      sudo apk add \
        build-base curl git zsh font-hack-ttf
      ;;
    darwin)
      printf 'Installing essentials for macos...\n'
      xcode-select --install || true
      install_brew "darwin"
      if command -v brew >/dev/null 2>&1; then
        brew install --quiet openssl curl git zsh font-hack-nerd-font
      fi
      ;;
    *)
      printf 'Error: unsupported distribution "%s"\n' "$distro"
      return 1
      ;;
  esac

  git_enable_ssl

  printf 'Done. Please log out and back in for changes to take effect.\n'
}

#############################################
# Install Docker engine and CLI
# Ensures daemon is enabled and user is in docker group
#############################################
install_docker() {
  local distro=$1

	if command -v docker >/dev/null 2>&1; then
		# printf 'Docker is already installed.\n'
		return 0
	fi

  case "$distro" in
    debian|fedora)
      printf 'Installing Docker using the official convenience script...\n'
      curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
      sh /tmp/get-docker.sh

      sudo systemctl enable docker || true
      sudo systemctl start docker || true

      sudo groupadd docker 2>/dev/null || true
      sudo usermod -aG docker "$USER" || true
      ;;
    arch)
      printf 'Installing Docker on Arch-based systems...\n'
      sudo pacman -Syu --noconfirm
      sudo pacman -S --noconfirm docker docker-compose || true

      sudo systemctl enable docker || true
      sudo systemctl start docker || true

      sudo groupadd docker 2>/dev/null || true
      sudo usermod -aG docker "$USER" || true
      ;;
    alpine)
      printf 'Installing Docker on Alpine Linux...\n'
      sudo apk add docker docker-compose || true

      sudo rc-update add docker default || true
      sudo service docker start || true

      addgroup "$USER" docker || true
      ;;
    darwin)
      printf 'Installing Docker Desktop and CLI on macOS...\n'
      install_brew "darwin"
      if command -v brew >/dev/null 2>&1; then
        brew install --quiet docker || true
				brew install --quiet docker-compose || true
				brew install --quiet docker-buildx || true
        brew install --quiet colima || true
      fi
      ;;
    *)
      printf 'Skipping Docker: unsupported distribution "%s"\n' "$distro"
      ;;
  esac

  printf 'Docker installation step complete. You may need to log out/in for group changes to apply.\n'
}

#############################################
# Installs homebrew on darwin and linux
# On linux it installs linuxbrew
# We tend to use nix instead
#############################################
install_brew() {
  local os_type="$1"
  local installer_url="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"
  local brew_bin

  # If brew already exists, bail out
  if command -v brew >/dev/null 2>&1; then
    # printf 'Homebrew is already installed (%s)\n' "$(command -v brew)"
    return 0
  fi

  printf 'Installing Homebrew...\n'
  /bin/bash -c "$(curl -fsSL $installer_url)"

  # Determine where brew was installed
  if [ "$os_type" = "darwin" ]; then
    brew_bin="/opt/homebrew/bin/brew"
  else
    if [ -d "/home/linuxbrew/.linuxbrew" ]; then
      brew_bin="/home/linuxbrew/.linuxbrew/bin/brew"
    else
      brew_bin="$HOME/.linuxbrew/bin/brew"
    fi
  fi

  load_brew "$os_type"

  if command -v brew >/dev/null 2>&1; then
    printf 'Homebrew installed and initialized: %s\n' "$(command -v brew)"
  else
    printf 'Error: brew not found after installation\n' >&2
    return 1
  fi
}

#############################################
# Install nix on darwin and linux
# On darwin, we add the nix-darwin util
#############################################
install_nix() {
  local os_type=$1
  local nix_profile="$HOME/.nix-profile"
  local installer_url="https://install.determinate.systems/nix"
  local uninstall_script="$HOME/.local/bin/nix-uninstall"

  # If Nix isn't already installedâ€¦
  if ! command -v nix >/dev/null 2>&1; then
    printf 'Installing Nix via %s\n' "$installer_url"
		[ "$os_type" = "darwin" ] && sudo ln -sf /etc/ssl/cert.pem /etc/ssl/certs/ca-certificates.crt
    curl --proto '=https' --tlsv1.2 -sSfL "$installer_url" | sh -s -- install --determinate --no-confirm
  else
    printf 'Nix is already installed at %s\n' "$nix_profile"
  fi
}

#############################################
# Install Home Manager
#############################################
install_homemanager() {
  load_nix
	printf 'Installing Home Manager...\n'
}

#############################################
# Install Devbox
#############################################
install_devbox() {
	if ! command -v devbox >/dev/null 2>&1; then
		curl -fsSL https://get.jetify.com/devbox | bash
	fi
}

#############################################
# Install complement tooling
#############################################

install_complements() {
  local distro=$1

  git_disable_ssl "$distro"

  case "$distro" in
    debian)
      printf 'No additional complements needed for Debian-based systems...\n'
      ;;
    fedora)
      printf 'No additional complements needed for Fedora-based systems...\n'
      ;;
    arch)
      printf 'No additional complements needed for Arch-based systems...\n'
      ;;
    alpine)
      printf 'No additional complements needed for Alpine Linux...\n'
      ;;
    darwin)
      printf 'Installing complements via Homebrew...\n'
      ;;
    *)
      printf 'Error: unsupported distribution "%s"\n' "$distro"
      return 1
      ;;
  esac

  git_enable_ssl

  printf 'Done. Please log out and back in for changes to take effect.\n'
}

#############################################
# Install Nix environment packages
#############################################
install_nix_bins() {
	local nix_file=".config/nix"
	local current_dir="$(pwd)"

	# Nix
	if command -v nix >/dev/null 2>&1 && [ -f "$HOME/$nix_file/flake.nix" ]; then
		printf 'Installing Nix environment from %s\n' "$nix_file"
		cd $HOME/$nix_file && nix profile add '.#homies' && cd "$current_dir"
	fi

	# Home manager
	if command -v home-manager >/dev/null 2>&1; then
		printf 'Installing Home Manager'
		home-manager switch
	fi

	# Devbox
	if command -v devbox >/dev/null 2>&1; then
		local db_path
		db_path="$(devbox global path)"
		if [ -f "$db_path/devbox.json" ]; then
			printf 'Installing Devbox environment from %s/devbox.json\n' "$db_path"
			devbox global install
		fi
	fi
}

#############################################
# Install Homebrew packages
#############################################
install_brew_packages() {
	local brews=("$@")

	if [ ! -x "$(command -v brew)" ]; then
		echo "No brew found, skipping brew packages installation"
		return 0
	fi

	if [ ${#brews[@]} -eq 0 ]; then
		echo "No brew packages to install"
		return 0
	fi

	for package in "${brews[@]}"; do
		brew install "$package" || true
	done
}

#############################################
# Install Homebrew casks
#############################################
install_brew_casks() {
	local casks=("$@")

	if [ ! -x "$(command -v brew)" ]; then
		echo "No brew found, skipping cask installation"
		return 0
	fi

	if [ ${#casks[@]} -eq 0 ]; then
		echo "No casks to install"
		return 0
	fi

	for cask in "${casks[@]}"; do
		echo "cask \"$cask\""
		brew install --cask "$cask" || true
	done
}

#############################################
# Install APT packages (Debian/Ubuntu)
#############################################
install_apt_packages() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		echo "No apt packages to install"
		return 0
	fi

	for package in "${packages[@]}"; do
		sudo apt install -y "$package" || true
	done
}

#############################################
# Install DNF packages (Fedora/RHEL/CentOS)
#############################################
install_dnf_packages() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		echo "No dnf packages to install"
		return 0
	fi

	for package in "${packages[@]}"; do
		sudo dnf install -y "$package" || true
	done
}

#############################################
# Install Pacman packages (Arch/Manjaro)
#############################################
install_pacman_packages() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		echo "No pacman packages to install"
		return 0
	fi

	sudo pacman -S --noconfirm "${packages[@]}" || true
}

#############################################
# Install APK packages (Alpine)
#############################################
install_apk_packages() {
	local packages=("$@")

	if [ ${#packages[@]} -eq 0 ]; then
		echo "No apk packages to install"
		return 0
	fi

	for package in "${packages[@]}"; do
		sudo apk add "$package" || true
	done
}

#############################################
# Temporarily disable Git's SSL check on macOS
#############################################
git_disable_ssl() {
	if [ "$1" = "darwin" ] && command -v git >/dev/null 2>&1; then
		git config --global http.sslVerify false
	fi
}

#############################################
# Re-enable Git's SSL check if Git is present
#############################################
git_enable_ssl() {
	if command -v git >/dev/null 2>&1; then
		git config --global http.sslVerify true
	fi
}
