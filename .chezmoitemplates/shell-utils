# Shell utility functions for chezmoi scripts
# exposes common functions used across installation scripts

{{/* Include shared utility functions */}}
{{- template "brew-utils" . -}}
{{- template "distro-utils" . -}}
{{- template "docker-utils" . -}}
{{- template "mise-utils" . -}}
{{- template "font-utils" . -}}
{{- template "git-utils" . -}}
{{- template "nix-utils" . -}}
{{- template "ttyd-utils" . -}}

#############################################
# Common initialization for all platforms
#############################################
load_env() {
	local distro=$1

	load_brew "$distro"
	load_nix
	load_homemanager
	load_devbox
}

#############################################
# Install essential tooling
#############################################
install_essentials() {
	printf '[ESSENTIALS] Installing essential tooling\n'

  local distro=$1
  local home="$HOME"
  local local_dir="$home/.local"
  local workspace="$home/Workspace/Projects"

  git_disable_ssl "$distro"

  # Create required directories
  mkdir -p \
    "$local_dir"/{bin,share,etc,src} \
    "$local_dir/share"/{node_modules,python_packages,gems,pnpm} \
    "$workspace"

  case "$distro" in
    debian)
      printf '...Updating APT and installing essentials...\n'
      sudo apt-get update -y && sudo apt-get upgrade -y
      sudo apt-get install -y \
        build-essential wget curl git zsh unzip
      ;;
    fedora)
      printf '...Updating DNF and installing essentials...\n'
      sudo dnf update -y
      sudo dnf install -y \
        @development-tools wget curl git zsh unzip
      ;;
    arch)
      printf '...Updating Pacman and installing essentials...\n'
      sudo pacman -Syu --noconfirm
      sudo pacman -S --noconfirm \
        base-devel wget curl git zsh unzip
      ;;
    alpine)
      printf '...Updating APK and installing essentials...\n'
      sudo apk update && sudo apk upgrade
      sudo apk add \
        build-base wget curl git zsh unzip
      ;;
    darwin)
      printf '...Installing essentials for macos...\n'
      xcode-select --install 2>/dev/null || :
      install_brew "darwin"
      if command -v brew >/dev/null 2>&1; then
        brew install --quiet openssl wget curl git zsh || :
      fi
      ;;
    *)
      printf '...Error: unsupported distribution "%s"\n' "$distro"
      return 1
      ;;
  esac

  git_enable_ssl
}

#############################################
# Install complement tooling
#############################################

install_complements() {
	printf '[COMPLEMENTS] Installing complement tooling\n'
  local distro=$1

  git_disable_ssl "$distro"

  case "$distro" in
    debian)
      install_nerd_fonts "debian"
      ;;
    fedora)
      install_nerd_fonts "fedora"
      ;;
    arch)
      install_nerd_fonts "arch"
      ;;
    alpine)
      install_nerd_fonts "alpine"
      ;;
    darwin)
      install_nerd_fonts "darwin"
      ;;
    *)
      printf '...Error: unsupported distribution "%s"\n' "$distro"
      return 1
      ;;
  esac

  git_enable_ssl
}
