# TTYD utility functions for chezmoi scripts

detect_mono_font() {
	local fonts=(
		"FiraMono Nerd Font"
		"Hack Nerd Font"
		"FiraCode"
		"DejaVu Sans Mono"
		"Liberation Mono"
		"Courier New"
		"monospace"
	)

	for font in "${fonts[@]}"; do
		if fc-list "$font" | grep -q .; then
			printf '%s' "$font"
			return 0
		fi
	done

	# Fallback to system default
	printf 'monospace'
	return 1
}


#############################################
# Install TTYD service
# Installs ttyd via brew and configures it as a service
# Supports macOS (launchctl), Linux (systemd), and Alpine (OpenRC)
#############################################
setup_ttyd() {
	local init_system=$1
	# Generate a default port between 7682-7999 based on hostname
	local HOSTNAME_HASH=$(echo "$HOSTNAME" | cksum | cut -d' ' -f1)
	local DEFAULT_TTYD_PORT=$((7682 + (HOSTNAME_HASH % 318)))  # 7682-7999 range
	local ttyd_port="${TTYD_PORT:-$DEFAULT_TTYD_PORT}"
	local ttyd_label="${TTYD_LABEL:-localhost.ttyd}"
	local home="$HOME"

	# Verify ttyd installation
	if ! command -v ttyd >/dev/null 2>&1; then
		printf 'ttyd not found\n' >&2
		return 1
	fi

	# Check for existing service/unit/launchctl config
	case "$init_system" in
		launchctl)
			local plist_dir="$HOME/Library/LaunchAgents"
			local plist_file="$plist_dir/${ttyd_label}.plist"
			if [ -f "$plist_file" ]; then
				printf 'ttyd launchctl service already exists: %s\n' "$plist_file"
				return 0
			fi
			;;
		systemd)
			local systemd_file="$HOME/.config/systemd/user/${ttyd_label}.service"
			if [ -f "$systemd_file" ]; then
				printf 'ttyd systemd user service already exists: %s\n' "$systemd_file"
				return 0
			fi
			;;
		openrc)
			local openrc_file="/etc/init.d/${ttyd_label}"
			if [ -f "$openrc_file" ]; then
				printf 'ttyd openrc service already exists: %s\n' "$openrc_file"
				return 0
			fi
			;;
	esac

	# Find ttyd binary
	local ttyd_bin
	ttyd_bin="$(command -v ttyd)"
	if [ -z "$ttyd_bin" ]; then
		printf 'Error: ttyd binary not found\n' >&2
		return 1
	fi

	# Determine the shell to use: tmux > zsh > $SHELL
	local shell_cmd
	if command -v tmux >/dev/null 2>&1; then
		shell_cmd="$(command -v tmux) new-session -A -s default"
	elif command -v zsh >/dev/null 2>&1; then
		shell_cmd="$(command -v zsh) --login"
	else
		shell_cmd="$SHELL --login"
	fi

	# Detect the best available monospace font
	local font_name=$(detect_mono_font)

	# Build ttyd arguments as an array to preserve quoted strings
	local ttyd_args=(
		"--writable"
		"--interface" "127.0.0.1"
		"--port" "$ttyd_port"
		"--client-option" "disableLeaveAlert=true"
		"--client-option" "lineHeight=1"
		"--client-option" "fontSize=10"
		"--client-option" "fontWeight=600"
		"--client-option" "fontFamily=$font_name"
		"--client-option" 'theme={"background": "#303446", "foreground": "#c6d0f5", "cursor": "#f2d5cf", "black": "#51576d", "blue": "#8caaee", "red": "#e78284", "green": "#a6d189", "yellow": "#e5c890", "magenta": "#f4b8e4", "cyan": "#81c8be", "white": "#b5bfe2", "brightBlack": "#626880", "brightWhite": "#a5adce", "brightBlue": "#8caaee", "brightRed": "#e78284", "brightGreen": "#a6d189", "brightYellow": "#e5c890", "brightMagenta": "#f4b8e4", "brightCyan": "#81c8be"}'
		$shell_cmd
	)

	case "$init_system" in
		launchctl)
			# macOS launchctl configuration
			local plist_dir="$HOME/Library/LaunchAgents"
			local plist_file="$plist_dir/${ttyd_label}.plist"

			mkdir -p "$plist_dir"

			cat > "$plist_file" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Label</key>
	<string>$ttyd_label</string>

	<key>ProgramArguments</key>
	<array>
		<string>$ttyd_bin</string>
EOF

			# Add ttyd arguments to plist
			for arg in "${ttyd_args[@]}"; do
				printf '		<string>%s</string>\n' "$arg" >> "$plist_file"
			done

			cat >> "$plist_file" << EOF
	</array>

	<key>RunAtLoad</key>
	<true/>

	<key>KeepAlive</key>
	<true/>

	<key>WorkingDirectory</key>
	<string>$HOME</string>

	<key>StandardOutPath</key>
	<string>$HOME/Library/Logs/$ttyd_label.log</string>

	<key>StandardErrorPath</key>
	<string>$HOME/Library/Logs/$ttyd_label.log</string>
</dict>
</plist>
EOF

			launchctl load "$plist_file" 2>/dev/null || true
			printf 'ttyd service installed and loaded on macOS\n'
			;;

		systemd)
			# Linux systemd configuration
			local service_file="/etc/systemd/system/${ttyd_label}.service"

			sudo tee "$service_file" > /dev/null << EOF
[Unit]
Description=TTYD Web Terminal
After=network.target

[Service]
Type=simple
User=$USER
Group=$USER
ExecStart=$ttyd_bin "${ttyd_args[@]}"
WorkingDirectory=$HOME
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

			sudo systemctl daemon-reload
			sudo systemctl enable "$ttyd_label"
			sudo systemctl start "$ttyd_label"

			printf 'ttyd service installed and started on Linux\n'
			printf 'Manage with: sudo systemctl {start|stop|restart|status} %s\n' "$ttyd_label"
			;;

		openrc)
			# Alpine OpenRC configuration
			local init_file="/etc/init.d/$ttyd_label"

			sudo tee "$init_file" > /dev/null << EOF
#!/sbin/openrc-run

name="TTYD Web Terminal"
description="TTYD Web Terminal Service"
command="$ttyd_bin"
command_args="${ttyd_args[*]}"
command_user="$USER:$USER"
command_background=true
pidfile="/var/run/\${RC_SVCNAME}.pid"
EOF

			sudo chmod +x "$init_file"
			sudo rc-update add "$ttyd_label" default
			sudo rc-service "$ttyd_label" start

			printf 'ttyd service installed and started on Alpine\n'
			printf 'Manage with: sudo rc-service %s {start|stop|restart|status}\n' "$ttyd_label"
			;;
	esac

	printf 'Access at: http://localhost:%s\n' "$ttyd_port"
	printf 'ttyd service installation complete\n'
}
